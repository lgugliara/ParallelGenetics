// todo: set based on chromosome' genes count
#define GROUP_SIZE 64

#pragma kernel Crossover
#pragma kernel Mutate
#pragma kernel Evaluate
#pragma kernel Pick

#include "utils/_BufferUtils.cginc"
#include "utils/_VariableUtils.cginc"

#include "libs/Context.cginc"
#include "libs/Random.cginc"
#include "libs/Arrays.cginc"

#include "utils/CrossoverUtils.cginc"
#include "utils/MutationUtils.cginc"
#include "utils/EvaluateUtils.cginc"
#include "utils/PickerUtils.cginc"

// Operations

// todo: set numthreads.x as chromosome' genes count
[numthreads(GROUP_SIZE,1,1)]
void Crossover (uint3 id : SV_DispatchThreadID)
{
    Context context = GetContext(id.x);

    //Crossover_Elites(context);
    //Crossover_Tournament(context);
}

// todo: set numthreads.x as chromosome' genes count
[numthreads(GROUP_SIZE,1,1)]
void Mutate (uint3 id : SV_DispatchThreadID)
{
    Context context = GetContext(id.x);
    
    //Mutation_Insert(context);
    //Mutation_Remove(context);
    //Mutation_Inner(context);
}

[numthreads(GROUP_SIZE,1,1)]
void Evaluate (uint3 id : SV_DispatchThreadID)
{
    Context context = GetContext(id.x);

    //Evaluate_Update(context);
}

// todo: set numthreads.x as chromosome' genes count
[numthreads(GROUP_SIZE,1,1)]
void Pick (uint3 id : SV_DispatchThreadID)
{
    Context context = GetContext(id.x);

    PickElites(context);
    //PickTournament(context);
}